version: 2.1

jobs:
  build-and-test-ubuntu:
      machine:
        enabled: true
        image: ubuntu-1604:201903-01
      steps:
        - run:
            name: Setup executor
            command: |
              sudo apt-get -qq update
              sudo apt-get -q install -y git openssh-client curl ca-certificates make tar gzip python3-dev unzip python-pip maven
        - checkout
        - run:
            name: Checkout submodules
            command: git submodule update --init --recursive        
        - run:
            name: Install Redis
            command: |
              sudo python -m pip install semantic_version
              sudo python ./deps/readies/bin/getredis --version 6
        - run:
            name: Install Oracle client
            command: sudo /bin/bash install_oracle_driver.sh
        - run:
            name: Tests
            command: |
              virtualenv --python=/usr/bin/python3 ./
              source ./bin/activate
              python3 -m pip install --no-cache-dir git+https://github.com/RedisLabsModules/RLTest.git@master docker sqlalchemy cx_Oracle cx-oracle==8.0.1
              make tests
        - persist_to_workspace:
            root: artifacts
            paths:
              - 'snapshot/*.jar'
              - 'release/*.jar'
  deploy_snapshots:
      docker:
        - image: redisfab/rmbuilder:6.0.9-x64-buster
      steps:
        - attach_workspace:
            at: artifacts
        - run:
            name: Deploy Snapshots to S3
            command: |
              for f in artifacts/snapshot/*.jar; do
                aws s3 cp $f s3://redismodules/rghibernate/snapshots/ --acl public-read
              done
  deploy_release:
      docker:
        - image: redisfab/rmbuilder:6.0.9-x64-buster
      steps:
        - attach_workspace:
            at: artifacts
        - run:
            name: Deploy Snapshots to S3
            command: |
              for f in artifacts/release/*.jar; do
                aws s3 cp $f s3://redismodules/rghibernate/ --acl public-read
              done

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

on-master: &on-master
  filters:
    branches:
      only:
        - master
        - write_through_support

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

after-build-and-test: &after-build-and-test
  requires:
    - build-and-test-ubuntu

workflows:
  version: 2
  commit:
    jobs:
      - build-and-test-ubuntu:
          <<: *on-any-branch
      - deploy_snapshots:
          context: common
          <<: *after-build-and-test
          <<: *on-master
      - deploy_release:
          context: common
          <<: *after-build-and-test
          <<: *on-version-tags

  nightly:
      triggers:
        - schedule:
            cron: "0 0 * * *"
            filters:
              branches:
                only:
                  - master
      jobs:
        - build-and-test-ubuntu
